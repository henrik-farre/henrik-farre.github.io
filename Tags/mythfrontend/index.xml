<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mythfrontend on Rockhopper.dk</title>
    <link>https://henrik-farre.github.io/tags/mythfrontend/</link>
    <description>Recent content in Mythfrontend on Rockhopper.dk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Jun 2008 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://henrik-farre.github.io/tags/mythfrontend/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Check video encoding script for MythTV</title>
      <link>https://henrik-farre.github.io/linux/software/mythtv/check-video-encoding-script-for-mythtv/</link>
      <pubDate>Sat, 28 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>https://henrik-farre.github.io/linux/software/mythtv/check-video-encoding-script-for-mythtv/</guid>
      <description>&lt;p&gt;I&amp;#8217;m using Xine as the preferred video player on my MythTV frontend, because it has a nice video output driver called &amp;#8220;xxmc&amp;#8221;. This driver enables hardware accelerated playback of mpeg1/2 streams (e.g. ivtv recordings or DVDs) on Geforce 7xxx and other Geforce chips. The driver should fall back to the xv driver if the stream is in another format than mpeg1/2, but somehow the xxmc drives screws up playback of videos encoded with Xvid as playback gets really jerky.&lt;/p&gt;

&lt;p&gt;I order to work around this, I created a script to check which video encoding is used, and if it&amp;#8217;s Xvid, Xine uses xv output. The script just requires MPlayer. Dump the script somewhere MythTV can find it, and set it as the preferred video player in MythTV.&lt;/p&gt;

&lt;p&gt;You can of cause adapt it if you would like to use MPlayer instead of Xine, or want the script to check for something else than Xvid, or want the script to check for something entirely different then encoding (size maybe?), just check the output of: mplayer -identify &amp;#8220;file&amp;#8221;&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Don&#39;t check encoding if MythTV is trying to playback a DVD
if [[ ${1} != &#39;dvd://&#39; ]]; then
  VIDEO_FORMAT=`mplayer -really-quiet -identify -frames -vc null -vo null -ao null ${1} 2&amp;lt;/dev/null | awk -F= &#39;/^ID_VIDEO_FORMAT/ {print $2}&#39;` # ID_VIDEO_FORMAT contains the encoding
else
  VIDEO_FORMAT=&#39;dvd&#39;
fi

if [[ ${VIDEO_FORMAT} = &#39;XVID&#39;  ]]; then
  VIDEO_DRIVER=&#34;-V xv&#34; # Use xv output for Xvid, xxmc for everything else
else
  VIDEO_DRIVER=&#34;-V xxmc&#34;
fi

# Xine options
AUDIO_DRIVER=&#34;-A alsa&#34;
EXTRA_OPTIONS=&#34;-pfhq --no-splash&#34;
DEBUG_OPTIONS=&#34;--verbose=5 &amp;gt; /shared/mythtv/xine.log&#34;

xine ${VIDEO_DRIVER} ${AUDIO_DRIVER} ${EXTRA_OPTIONS} ${1}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Check if MythTV backend is up</title>
      <link>https://henrik-farre.github.io/linux/software/mythtv/check-if-mythtv-backend-is-up/</link>
      <pubDate>Sat, 12 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>https://henrik-farre.github.io/linux/software/mythtv/check-if-mythtv-backend-is-up/</guid>
      <description>&lt;p&gt;My MythTV frontend depends on the masterbackend to be up and running, mainly because some partitions are nfs mounted. So I created a simple script to check if the backend is responding to ping:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

function isup() {
 ping -q -n -c1 -w2 BACKEND_IP &amp;gt; /dev/null
 if [[ $? !=  ]]; then
   sleep 5
   isup
 else
   echo &#34;is up&#34;
 fi
}

isup&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;But there is a small problem with this approach: the backend starts replying to ping long before nfsd and mythbackend are ready.&lt;/p&gt;

&lt;p&gt;So instead of using ping, I created a script that checks if mythbackend&amp;#8217;s status page (port 6544) is ready, using wget:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

function isbackendup {
  wget -q http://BACKEND_IP:6544 -O /dev/null
  if [[ $? !=  ]]; then
    sleep 5
    isbackendup
  else
    stat_done
  fi
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Finally I wrapped it all up in an ArchLinux rc script, and use WOL to wake the backend:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

. /etc/rc.conf
. /etc/rc.d/functions

function isbackendup {
  wget -q http://BACKEND_IP:6544 -O /dev/null
  if [[ $? !=  ]]; then
    sleep 5
    isbackendup
  else
    stat_done
  fi
}

case &#34;$1&#34; in
  start)
    stat_busy &#34;Checking if backend is up...&#34;
    wol BACKEND_MACADDR &amp;gt; /dev/null
    isbackendup
    ;;
  stop)
    /bin/true
    ;;
  restart)
    $ stop
    sleep 1
    $ start
    ;;
  *)
    echo &#34;usage: $0 {start|stop|restart}&#34;
esac
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;If you run ArchLinux just added it to /etc/rc.conf in the DAEMONS array.&lt;/p&gt;

&lt;p&gt;Remember to replace &lt;strong&gt;BACKEND_IP&lt;/strong&gt; and &lt;strong&gt;BACKEND_MACADDR&lt;/strong&gt; with your own values.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
