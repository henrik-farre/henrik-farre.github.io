<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Duplicity on Rockhopper.dk</title>
    <link>http://rockhopper.dk/tags/duplicity/</link>
    <description>Recent content in Duplicity on Rockhopper.dk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 May 2016 10:40:15 +0200</lastBuildDate>
    <atom:link href="http://rockhopper.dk/tags/duplicity/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Backing up to Google drive with Duplicity</title>
      <link>http://rockhopper.dk/linux/software/backing-up-to-google-drive-with-duplicity</link>
      <pubDate>Tue, 10 May 2016 10:40:15 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/backing-up-to-google-drive-with-duplicity</guid>
      <description>

&lt;p&gt;As described in my &lt;a href=&#34;http://rockhopper.dk/linux/software/duplicity-backup-dropbox-vs-google-drive-back-end/&#34;&gt;previous post&lt;/a&gt; I use Duplicity with Google Drive for storage. In this post I give a quick how to on configuring Duplicity for that setup.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Duplicity installed&lt;/li&gt;
&lt;li&gt;PyDrive, I installed it from Arch Linux&#39;s &lt;a href=&#34;https://aur.archlinux.org/packages/python2-pydrive/&#34;&gt;Aur repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GPG keys configured&lt;/li&gt;
&lt;li&gt;A Google Drive account&lt;/li&gt;
&lt;li&gt;First time you run Duplicity it has to be done interactively, as it will prompt you to allow access to Google drive&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;google-drive-api-setup:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Google drive API setup&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://console.developers.google.com/&#34;&gt;console.developers.google.com&lt;/a&gt; and create a new project, under &amp;quot;Show advanced options &amp;gt; App Engine location&amp;quot; I selected &amp;quot;europe-west&amp;quot;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &amp;quot;Google Drive API&amp;quot; and enable, then select &amp;quot;Credentials&amp;quot; in the menu to the left&lt;/li&gt;
&lt;li&gt;Fill out &amp;quot;OAuth consent screen&amp;quot;&lt;/li&gt;
&lt;li&gt;Click &amp;quot;Create credentials&amp;quot; in the popup and select &amp;quot;OAuth client ID&amp;quot; in the dropdown&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Other&amp;quot; and give the client a name&lt;/li&gt;
&lt;li&gt;Download the JSON file, save it as &lt;code&gt;/root/.duplicity/client_secrets.json&lt;/code&gt;
. Put the &amp;quot;Client ID&amp;quot; and &amp;quot;Client secret&amp;quot; in &lt;code&gt;/root/.duplicity/gdrive&lt;/code&gt;
 (see below)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;row image-gallery&#34;&gt;
  
&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_enable_api.png&#34;
    title=&#34;1. Enabling Google drive API for project&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_enable_api.png&#34;
            class=&#34;&#34;
            
            alt=&#34;1. Enabling Google drive API for project&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;1. Enabling Google drive API for project&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_oauth_consent_screen.png&#34;
    title=&#34;2. OAuth consent screen&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_oauth_consent_screen.png&#34;
            class=&#34;&#34;
            
            alt=&#34;2. OAuth consent screen&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;2. OAuth consent screen&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_create_oauth.png&#34;
    title=&#34;3. Selecting OAuth client ID&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_create_oauth.png&#34;
            class=&#34;&#34;
            
            alt=&#34;3. Selecting OAuth client ID&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;3. Selecting OAuth client ID&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_create_client_id.png&#34;
    title=&#34;4. Creating client ID&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_create_client_id.png&#34;
            class=&#34;&#34;
            
            alt=&#34;4. Creating client ID&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;4. Creating client ID&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_client_id.png&#34;
    title=&#34;5. Credentials for client and JSON download&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_client_id.png&#34;
            class=&#34;&#34;
            
            alt=&#34;5. Credentials for client and JSON download&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;5. Credentials for client and JSON download&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;


&lt;/div&gt;


&lt;p&gt;Create &lt;code&gt;/root/.duplicity/gdrive&lt;/code&gt;
 and add the values from step 5:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;client_config_backend: settings
client_config:
  client_id: XXXXXXXXXXXXXXXXXXXXXX.apps.googleusercontent.com
  client_secret: XXXXXXXXXXXXXXXXXXXXXX
save_credentials: True
save_credentials_backend: file
save_credentials_file: gdrive.cache
get_refresh_token: True&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h2 id=&#34;granting-duplicity-access-to-google-drive:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Granting Duplicity access to Google drive&lt;/h2&gt;

&lt;p&gt;PyDrive would prompt for a verification code everytime I ran Duplicity, and would not create the gdrive.cache file. I fixed it by changing the current working directory to &lt;code&gt;/root/.duplicity/&lt;/code&gt;
. A simple script like the following should work:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
cd /root/.duplicity/

PASSPHRASE=&#34;XXXXXXXXXX&#34;
GOOGLE_DRIVE_SETTINGS=&#34;/root/.duplicity/gdrive&#34;
DEST=&#34;gdocs://YOUR_GMAIL/SOME_DIR/$HOSTNAME/home&#34;
SRC=&#34;/home&#34;

duplicity incr --encrypt-key XXXXXXX --full-if-older-than 4M --volsize 1024 --asynchronous-upload --exclude-device-files --exclude-other-filesystems &#34;${SRC}&#34; &#34;${DEST}&#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;When you run this script the first time, you should get a prompt that says (XXXXXXXXXXXXXXXXXXXXXX will be your client id):&lt;/p&gt;

&lt;pre&gt;Go to the following link in your browser:

    https://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;response_type=code&amp;client_id=XXXXXXXXXXXXXXXXXXXXXX.apps.googleusercontent.com&amp;access_type=offline

Enter verification code:&lt;/pre&gt;

&lt;p&gt;When you have approved access you should have the file &lt;code&gt;/root/.duplicity/gdrive.cache&lt;/code&gt;
, and next time Duplicity runs, it should automatically be authorized.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;I have created a set of &lt;a href=&#34;https://github.com/henrik-farre/duplicity_backup_scripts&#34;&gt;Duplicity backup scrips&lt;/a&gt; with error handling/reporting that wraps backup, restore, cleanup and backup verification, feel free to use or fork them :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duplicity backup: Dropbox vs Google drive back end</title>
      <link>http://rockhopper.dk/linux/software/duplicity-backup-dropbox-vs-google-drive-back-end</link>
      <pubDate>Mon, 02 May 2016 14:08:31 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/duplicity-backup-dropbox-vs-google-drive-back-end</guid>
      <description>&lt;p&gt;As many other I have been looking for a cheap encrypted offsite backup for family photos, documents and other important data. I quickly choose duplicity as it provides the encrypted part and the possibility to use many different storage solutions, but the cheap offsite part is was a bit harder to find.&lt;/p&gt;

&lt;p&gt;I looked at Amazon offerings: S3 and Glacier, both look cheap, but I&#39;m unsure on how much I have to pay in total, and Glacier has crazy download prices.&lt;/p&gt;

&lt;p&gt;My second choice was Dropbox, and I purchased a Dropbox Pro account (1Tb) for EUR 99/year (~ DDK 744/year), but I canceled it after ~8 days, as upload was to slow (Thankfully I could get a refund). It took about ~50 hours to upload ~350Gb. Duplicity uses the &lt;a href=&#34;https://github.com/dropbox/dropbox-sdk-python/&#34;&gt;dropbox-python-sdk&lt;/a&gt;, and Dropbox API&#39;s method for uploading files larger than 150Mb is to use &amp;quot;chunked&amp;quot; upload; The first API call creates a session, and then data is append to this session until the entire file is uploaded. The chunk size can be configured, but 150Mb is the max size. So I experimented with different sizes and found that the default size of 16Mb would not utilize the bandwidth very good. But if I changed it to 150Mb I would see ~50Mbps for the entire file, but then would come a delay of 20-30secs where there was no network traffic to Dropbox:&lt;/p&gt;

&lt;div class=&#34;row image-gallery&#34;&gt;
  
&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_wan_upload_dropbox_150mb_chunks.png&#34;
    title=&#34;Upload to Dropbox with 150Mb chunk size&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_wan_upload_dropbox_150mb_chunks.png&#34;
            class=&#34;&#34;
            
            alt=&#34;Upload to Dropbox with 150Mb chunk size&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Upload to Dropbox with 150Mb chunk size&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_wan_upload_dropbox_16mb_chunks.png&#34;
    title=&#34;Upload to Dropbox with 16Mb chunk size&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_wan_upload_dropbox_16mb_chunks.png&#34;
            class=&#34;&#34;
            
            alt=&#34;Upload to Dropbox with 16Mb chunk size&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Upload to Dropbox with 16Mb chunk size&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;


&lt;/div&gt;


&lt;p&gt;I tested the chunk size by changing the DPBX_UPLOAD_CHUNK_SIZE in &lt;code&gt;/usr/lib/python2.7/site-packages/duplicity/backends/dpbxbackend.py&lt;/code&gt;
:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This is chunk size for upload using Dpbx chumked API v2. It doesn&#39;t
# make sense to make it much large since Dpbx SDK uses connection pool
# internally. So multiple chunks will sent using same keep-alive socket
# Plus in case of network problems we most likely will be able to retry
# only failed chunk
DPBX_UPLOAD_CHUNK_SIZE = 16 * 1024 * 1024&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So I decided to try Google Drive as back end, which was just fixed in duplicity version 0.7.07.1. Google drive utilized the bandwidth much better, and the delay between uploads is when duplicity prepares the next volume for upload.&lt;/p&gt;

&lt;p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-4 photo&#34;&gt;
    &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_wan_upload_google_drive_volsize_512mb.png&#34;
    title=&#34;Upload to Google Drive with 512Mb volsize&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_wan_upload_google_drive_volsize_512mb.png&#34;
            class=&#34;&#34;
            
            alt=&#34;Upload to Google Drive with 512Mb volsize&#34;
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Upload to Google Drive with 512Mb volsize&lt;/div&gt;
&lt;/a&gt;

  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So I purchased 1Tb of storage for Google drive for USD 9.99/month, and to my surprise it was without taxes, so I ended up paying USD 12.49/month (~ DKK 85/month), but it is much faster than Dropbox.&lt;/p&gt;

&lt;p&gt;But as duplicity tried to upload the very last file, it encountered an error:&lt;/p&gt;

&lt;pre&gt;Attempt 1 failed. OverflowError: length too large
Attempt 2 failed. OverflowError: length too large
Attempt 3 failed. OverflowError: length too large
Attempt 4 failed. OverflowError: length too large
Giving up after 5 attempts. OverflowError: length too large&lt;/pre&gt;

&lt;p&gt;It looks like it is caused by &lt;a href=&#34;https://github.com/googledrive/PyDrive/issues/27&#34;&gt;this bug&lt;/a&gt; in PyDrive. I could see duplicity using more than 70% memory, and then produce an error.&lt;/p&gt;

&lt;p&gt;Duplicity creates a &amp;quot;sigtar&amp;quot; file of around 3Gb, which is to much for PyDrive to handle.&lt;/p&gt;

&lt;pre&gt;2,9Gb  duplicity-full-signatures.20160425T193345Z.sigtar.gpg
3,1Gb  duplicity-full-signatures.20160425T193345Z.sigtar.part&lt;/pre&gt;

&lt;p&gt;The solution is to split the backup into smaller sets, so instead of backing up the entire home directory up, I have one set for documents, one for pictures and so on.&lt;/p&gt;

&lt;p&gt;So in conclusion I would say that I found almost every thing I looked for, except the cheap part :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
