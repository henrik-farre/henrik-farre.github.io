<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Rockhopper.dk</title>
    <link>http://rockhopper.dk/tags/docker/</link>
    <description>Recent content in Docker on Rockhopper.dk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 May 2016 14:56:22 +0200</lastBuildDate>
    <atom:link href="http://rockhopper.dk/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Behat tests with Symfony 3, PhantomJS and Docker</title>
      <link>http://rockhopper.dk/linux/software/behat-tests-with-symfony3-phantomjs-and-docker</link>
      <pubDate>Sat, 14 May 2016 14:56:22 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/behat-tests-with-symfony3-phantomjs-and-docker</guid>
      <description>

&lt;p&gt;Writing tests should be easy, but installing and maintaining every single piece needed is nontrivial. Thankfully Docker can provide each piece of the jigsaw: Symfony 3, Behat and PhantomJS.&lt;/p&gt;

&lt;p&gt;I have created &lt;a href=&#34;https://github.com/henrik-farre/docker&#34;&gt;pilotboat&lt;/a&gt; to make it easy for me to develop and test PHP based applications, and I will use it in this how-to. If you prefer to use another setup, feel free to look through my &lt;a href=&#34;https://github.com/henrik-farre/docker&#34;&gt;github repository for pilotboat&lt;/a&gt; for inspiration.&lt;/p&gt;

&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Working Docker installation&lt;/li&gt;
&lt;li&gt;A top level domain that points to your local machine, e.g. .dev&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;pilotboat-setup&#34;&gt;Pilotboat setup&lt;/h2&gt;

&lt;p&gt;The following steps are required to setup pilotboat:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone &lt;a href=&#34;https://github.com/henrik-farre/docker&#34;&gt;https://github.com/henrik-farre/docker&lt;/a&gt; to your preferred location&lt;/li&gt;
&lt;li&gt;Add the bin directory to your $PATH.&lt;/li&gt;
&lt;li&gt;(Optional) Create an &lt;a href=&#34;https://blackfire.io&#34;&gt;Blackfire.io&lt;/a&gt; account&lt;/li&gt;
&lt;li&gt;Copy containers/docker.env.skel to containers/docker.env and fill out the values for your Blackfire.io account, or leave them blank&lt;/li&gt;
&lt;li&gt;Run: &lt;kbd&gt;pilotboat start php-dev-debian-jessie&lt;/kbd&gt;
 (starts the default image based on Debian Jessie with Apache 2.4.x and PHP 5.6.x)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Docker-compose will download and build the needed images and start the containers.&lt;/p&gt;

&lt;h2 id=&#34;site-setup&#34;&gt;Site setup&lt;/h2&gt;

&lt;p&gt;To create a site based on Symfony 3 run &lt;kbd&gt;pilotboat site-create symfony.dev symfony&lt;/kbd&gt;
 (symfony.dev is your domain name, you may choose anything you like). The latest stable version of the Symfony 3 framework will be downloaded and installed. Note that pilotboat will create a database, but you will have to manually configure &lt;code&gt;app/config/parameters.yml&lt;/code&gt;
 to access it.&lt;/p&gt;

&lt;h2 id=&#34;behat-configuration&#34;&gt;Behat configuration&lt;/h2&gt;

&lt;p&gt;Enter the container with &lt;kbd&gt;pilotboat shell&lt;/kbd&gt;
 and change to your site: &lt;kbd&gt;cd symfony.dev&lt;/kbd&gt;
.&lt;/p&gt;

&lt;p&gt;Next you will have to install the needed bundles for Behat, using composer: &lt;kbd&gt;composer require --dev behat/behat behat/mink behat/mink-extension behat/mink-selenium2-driver&lt;/kbd&gt;
&lt;/p&gt;

&lt;p&gt;When composer is done installing, initialize Behat with &lt;kbd&gt;vendor/bin/behat --init&lt;/kbd&gt;
, this will create the &lt;code&gt;features&lt;/code&gt;
 directory and &lt;code&gt;features/bootstrap/FeatureContext.php&lt;/code&gt;
.&lt;/p&gt;

&lt;p&gt;Now we have to tie everything together using a &lt;code&gt;behat.yml&lt;/code&gt;
 file, that you create in the root directory of your site, e.g. /var/www/symfony.dev:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;default:
  suites:
    default:
      contexts:
        - FeatureContext
        - Behat\MinkExtension\Context\MinkContext
  extensions:
    Behat\MinkExtension:
      base_url: &#39;http://symfony.dev/&#39;
      sessions:
        default:
          selenium2:
            wd_host: &#39;http://phantomjs:8910/wd/hub&#39;&lt;/code&gt;&lt;/pre&gt;


&lt;h2 id=&#34;writing-and-running-tests&#34;&gt;Writing and running tests&lt;/h2&gt;

&lt;p&gt;I will not go into detail on how to write tests, so the following is just a small example. Create &lt;code&gt;features/homepage.feature&lt;/code&gt;
 and put the following in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: Homepage
  In order to see if the home page works
  As a website user
  I need to be able to see the home page

  Scenario: See the home page
    Given I am on &#34;/&#34;
    Then I should see &#34;Welcome to Symfony 3&#34;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Run &lt;kbd&gt;vendor/bin/behat&lt;/kbd&gt;
 to execute the test, and you should see something like:&lt;/p&gt;

&lt;pre&gt;Feature: Homepage
  In order to see if the home page works
  As a website user
  I need to be able to see the home page

  Scenario: See the home page                # features/homepage.feature:6
    Given I am on &#34;/&#34;                        # Behat\MinkExtension\Context\MinkContext::visit()
    Then I should see &#34;Welcome to Symfony 3&#34; # Behat\MinkExtension\Context\MinkContext::assertPageContainsText()

1 scenario (1 passed)
2 steps (2 passed)
0m0.21s (13.43Mb)&lt;/pre&gt;

&lt;p&gt;And you&#39;re ready to write tests :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Local PHP development with Vim/Neovim and Docker</title>
      <link>http://rockhopper.dk/linux/software/local-php-development-with-vimneovim-and-docker</link>
      <pubDate>Tue, 12 Apr 2016 10:47:36 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/local-php-development-with-vimneovim-and-docker</guid>
      <description>

&lt;p&gt;I use Neovim for all my text editing, and as I&#39;m a web developer I edit a lot of HTML, PHP, CSS and JavaScript. And not only do I have to switch between different programming/markup languages I also have to switch between different environments, ranging from old Drupal 6 sites on Debian squeeze to a Symfony setup on Debian Jessie to ensure that my code works in production.&lt;/p&gt;

&lt;h2 id=&#34;enter-docker&#34;&gt;Enter Docker&lt;/h2&gt;

&lt;p&gt;Switching between different versions of Apache/PHP/MySQL and other components is nearly impossible if they are locally installed. In the old dark days I would work on a site directly on the server, then later Vagrant came along and gave a virtual server that could be provisioned like the production server and now Docker gives lightweight containers that allows to quickly switch between different setups.&lt;/p&gt;

&lt;p&gt;I use a Docker image that contains all the needed components for the development environment. My docker setup is here &lt;a href=&#34;http://github.com/henrik-farre/docker&#34;&gt;http://github.com/henrik-farre/docker&lt;/a&gt;. I use a simple script to make interaction easier, it&#39;s called &amp;quot;pilotboat&amp;quot;.&lt;/p&gt;

&lt;p&gt;My Docker image contains Apache, MariaDB, PHP5 with Xdebug, Mailhog and Webgrind. Database data is kept separately in a volume and sites/virtual hosts are kept on the host.&lt;/p&gt;

&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;I can either drop an existing virtual host file in the vhosts directory, or run &lt;code&gt;pilotboat site-create mydomain.dev&lt;/code&gt; which will create a virtual host and directory structure. I use dnsmasq to point the top level domain (.dev) to localhost. If you use NetworkManager just create the following file: &lt;code&gt;/etc/NetworkManager/dnsmasq.d/dev.conf&lt;/code&gt; containing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;address=/dev/127.0.0.1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I can checkout the site from git and import a database, which can be done by &lt;code&gt;pilotboat db-import database_name&lt;/code&gt;. The command will try to import a file in the databases directory called database_name.sql.gz and the file should have been created by running &lt;code&gt;mysqldump -f --opt -u root -p -c [database_name] | gzip &amp;gt; [database_name.sql.gz]&lt;/code&gt;, or alternative I use phpMyAdmin which is running in the container on &lt;a href=&#34;http://localhost/phpmyadmin/&#34;&gt;http://localhost/phpmyadmin/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vim-neovim&#34;&gt;Vim / Neovim&lt;/h2&gt;

&lt;p&gt;The only special setup for Vim is connecting Xdebug in the container to Vdebug, and map paths from inside the container to the local file system:
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:vdebug_options = {&amp;quot;path_maps&amp;quot;: {&amp;quot;/var/www&amp;quot;: &amp;quot;/path/to/pilotboat/sites&amp;quot;}, &amp;quot;break_on_open&amp;quot;: 0, &amp;quot;watch_window_style&amp;quot;: &amp;quot;compact&amp;quot;, &amp;quot;server&amp;quot; : &amp;quot;172.17.0.1&amp;quot;, &amp;quot;port&amp;quot;: 9000}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;I try to make Neovim do as much work for me as possible, and I use the following plugins to help me with that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/joonty/vdebug&#34;&gt;Vdebug&lt;/a&gt;: Debug PHP code step by step&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattn/emmet-vim&#34;&gt;Emmet&lt;/a&gt;: Expands div#header &amp;gt; ul.menu &amp;gt; li*5 to real HTML&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SirVer/ultisnips&#34;&gt;UltiSnips&lt;/a&gt;: Advanced snippet expanding, useful for quickly typing PHP functions complete with PHP doc comments&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Valloric/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;: Great for completing the current programming languages native functions and vars&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Raimondi/delimitMate&#34;&gt;delimitMate&lt;/a&gt;: Automatically insert matching brackets, parentheses and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;Surround&lt;/a&gt;: Wraps words in &#39; or * or other characters&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scrooloose/nerdcommenter&#34;&gt;NERD Commenter&lt;/a&gt;: Comment/Uncomment single lines or blocks&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/benekastah/neomake&#34;&gt;Neomake&lt;/a&gt;: Automatically asynchronous syntax checking, works with PHP lint, &lt;a href=&#34;https://phpmd.org/&#34;&gt;PHP Mess Detector&lt;/a&gt; and &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP_CodeSniffer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find my Neovim setup here: &lt;a href=&#34;http://github.com/henrik-farre/vimrc&#34;&gt;http://github.com/henrik-farre/vimrc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker and PHP xdebug</title>
      <link>http://rockhopper.dk/linux/docker-and-php-xdebug/</link>
      <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rockhopper.dk/linux/docker-and-php-xdebug/</guid>
      <description>&lt;p&gt;I have switched from using Vagrant to Docker as my local development environment, and I&amp;#8217;m still mentally trying to switch :)&lt;/p&gt;

&lt;p&gt;To use the &lt;a href=&#34;https://github.com/joonty/vdebug&#34;&gt;vdebug plugin&lt;/a&gt; in Vim I have set xdebug up inside the container as follows:&lt;/p&gt;

&lt;p&gt;/etc/php5/conf.d/20-xdebug.ini (Debian wheezy)&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-ini&#34;&gt;zend_extension=/usr/lib/php5/20100525/xdebug.so
xdebug.remote_enable=1
xdebug.remote_autostart=0
xdebug.remote_connect_back=1
xdebug.remote_port=9000&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in my ~/.vimrc I have these vdebug settings:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-vim&#34;&gt;let g:vdebug_options = {&#34;path_maps&#34;: {&#34;/var/www&#34;: &#34;/home/username/Localdev&#34;}, \
&#34;break_on_open&#34;: 0, &#34;watch_window_style&#34;: &#34;compact&#34;, \
&#34;server&#34; : &#34;172.17.42.1&#34;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;172.17.42.1 is the ip of the bridge created by docker, it can be found by using ip addr and looking for the &amp;#8220;docker0&amp;#8221; interface.&lt;/p&gt;

&lt;p&gt;I create the xdebug ini file in my Dockerfile, see my &lt;a href=&#34;https://github.com/henrik-farre/docker&#34;&gt;Docker repository&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
