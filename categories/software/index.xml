<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Rockhopper.dk</title>
    <link>http://rockhopper.dk/categories/software/</link>
    <description>Recent content in Software on Rockhopper.dk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 May 2016 10:40:15 +0200</lastBuildDate>
    <atom:link href="http://rockhopper.dk/categories/software/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Backing up to Google drive with Duplicity</title>
      <link>http://rockhopper.dk/linux/software/backing-up-to-google-drive-with-duplicity</link>
      <pubDate>Tue, 10 May 2016 10:40:15 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/backing-up-to-google-drive-with-duplicity</guid>
      <description>

&lt;p&gt;As described in my &lt;a href=&#34;http://rockhopper.dk/linux/software/duplicity-backup-dropbox-vs-google-drive-back-end/&#34;&gt;previous post&lt;/a&gt; I use Duplicity with Google Drive for storage. In this post I give a quick how to on configuring Duplicity for that setup.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Duplicity installed&lt;/li&gt;
&lt;li&gt;PyDrive, I installed it from Arch Linux&#39;s &lt;a href=&#34;https://aur.archlinux.org/packages/python2-pydrive/&#34;&gt;Aur repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GPG keys configured&lt;/li&gt;
&lt;li&gt;A Google Drive account&lt;/li&gt;
&lt;li&gt;First time you run Duplicity it has to be done interactively, as it will prompt you to allow access to Google drive&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;google-drive-api-setup:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Google drive API setup&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://console.developers.google.com/&#34;&gt;console.developers.google.com&lt;/a&gt; and create a new project, under &amp;quot;Show advanced options &amp;gt; App Engine location&amp;quot; I selected &amp;quot;europe-west&amp;quot;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &amp;quot;Google Drive API&amp;quot; and enable, then select &amp;quot;Credentials&amp;quot; in the menu to the left&lt;/li&gt;
&lt;li&gt;Fill out &amp;quot;OAuth consent screen&amp;quot;&lt;/li&gt;
&lt;li&gt;Click &amp;quot;Create credentials&amp;quot; in the popup and select &amp;quot;OAuth client ID&amp;quot; in the dropdown&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Other&amp;quot; and give the client a name&lt;/li&gt;
&lt;li&gt;Download the JSON file, save it as &lt;code&gt;/root/.duplicity/client_secrets.json&lt;/code&gt;
. Put the &amp;quot;Client ID&amp;quot; and &amp;quot;Client secret&amp;quot; in &lt;code&gt;/root/.duplicity/gdrive&lt;/code&gt;
 (see below)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;row image-gallery&#34;&gt;
  
&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_enable_api.png&#34;
    title=&#34;1. Enabling Google drive API for project&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_enable_api.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;1. Enabling Google drive API for project&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_oauth_consent_screen.png&#34;
    title=&#34;2. OAuth consent screen&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_oauth_consent_screen.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;2. OAuth consent screen&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_create_oauth.png&#34;
    title=&#34;3. Selecting OAuth client ID&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_create_oauth.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;3. Selecting OAuth client ID&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_create_client_id.png&#34;
    title=&#34;4. Creating client ID&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_create_client_id.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;4. Creating client ID&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_gdrive_backend_api_client_id.png&#34;
    title=&#34;5. Credentials for client and JSON download&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_gdrive_backend_api_client_id.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;5. Credentials for client and JSON download&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;


&lt;/div&gt;


&lt;p&gt;Create &lt;code&gt;/root/.duplicity/gdrive&lt;/code&gt;
 and add the values from step 5:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;client_config_backend: settings
client_config:
  client_id: XXXXXXXXXXXXXXXXXXXXXX.apps.googleusercontent.com
  client_secret: XXXXXXXXXXXXXXXXXXXXXX
save_credentials: True
save_credentials_backend: file
save_credentials_file: gdrive.cache
get_refresh_token: True&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h2 id=&#34;granting-duplicity-access-to-google-drive:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Granting Duplicity access to Google drive&lt;/h2&gt;

&lt;p&gt;PyDrive would prompt for a verification code everytime I ran Duplicity, and would not create the gdrive.cache file. I fixed it by changing the current working directory to &lt;code&gt;/root/.duplicity/&lt;/code&gt;
. A simple script like the following should work:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
cd /root/.duplicity/

PASSPHRASE=&#34;XXXXXXXXXX&#34;
GOOGLE_DRIVE_SETTINGS=&#34;/root/.duplicity/gdrive&#34;
DEST=&#34;gdocs://YOUR_GMAIL/SOME_DIR/$HOSTNAME/home&#34;
SRC=&#34;/home&#34;

duplicity incr --encrypt-key XXXXXXX --full-if-older-than 4M --volsize 1024 --asynchronous-upload --exclude-device-files --exclude-other-filesystems &#34;${SRC}&#34; &#34;${DEST}&#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;When you run this script the first time, you should get a prompt that says (XXXXXXXXXXXXXXXXXXXXXX will be your client id):&lt;/p&gt;

&lt;pre&gt;Go to the following link in your browser:

    https://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;response_type=code&amp;client_id=XXXXXXXXXXXXXXXXXXXXXX.apps.googleusercontent.com&amp;access_type=offline

Enter verification code:&lt;/pre&gt;

&lt;p&gt;When you have approved access you should have the file &lt;code&gt;/root/.duplicity/gdrive.cache&lt;/code&gt;
, and next time Duplicity runs, it should automatically be authorized.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up:a4873c35425d94672fb7ac53bf8aa261&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;I have created a set of &lt;a href=&#34;https://github.com/henrik-farre/duplicity_backup_scripts&#34;&gt;Duplicity backup scrips&lt;/a&gt; with error handling/reporting that wraps backup, restore, cleanup and backup verification, feel free to use or fork them :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duplicity backup: Dropbox vs Google drive back end</title>
      <link>http://rockhopper.dk/linux/software/duplicity-backup-dropbox-vs-google-drive-back-end</link>
      <pubDate>Mon, 02 May 2016 14:08:31 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/duplicity-backup-dropbox-vs-google-drive-back-end</guid>
      <description>&lt;p&gt;As many other I have been looking for a cheap encrypted offsite backup for family photos, documents and other important data. I quickly choose duplicity as it provides the encrypted part and the possibility to use many different storage solutions, but the cheap offsite part is was a bit harder to find.&lt;/p&gt;

&lt;p&gt;I looked at Amazon offerings: S3 and Glacier, both look cheap, but I&#39;m unsure on how much I have to pay in total, and Glacier has crazy download prices.&lt;/p&gt;

&lt;p&gt;My second choice was Dropbox, and I purchased a Dropbox Pro account (1Tb) for EUR 99/year (~ DDK 744/year), but I canceled it after ~8 days, as upload was to slow (Thankfully I could get a refund). It took about ~50 hours to upload ~350Gb. Duplicity uses the &lt;a href=&#34;https://github.com/dropbox/dropbox-sdk-python/&#34;&gt;dropbox-python-sdk&lt;/a&gt;, and Dropbox API&#39;s method for uploading files larger than 150Mb is to use &amp;quot;chunked&amp;quot; upload; The first API call creates a session, and then data is append to this session until the entire file is uploaded. The chunk size can be configured, but 150Mb is the max size. So I experimented with different sizes and found that the default size of 16Mb would not utilize the bandwidth very good. But if I changed it to 150Mb I would see ~50Mbps for the entire file, but then would come a delay of 20-30secs where there was no network traffic to Dropbox:&lt;/p&gt;

&lt;div class=&#34;row image-gallery&#34;&gt;
  
&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_wan_upload_dropbox_150mb_chunks.png&#34;
    title=&#34;Upload to Dropbox with 150Mb chunk size&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_wan_upload_dropbox_150mb_chunks.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Upload to Dropbox with 150Mb chunk size&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;

&lt;div class=&#34;col-xs-6 col-sm-4 col-md-4 gallery-photo&#34;&gt;
  &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_wan_upload_dropbox_16mb_chunks.png&#34;
    title=&#34;Upload to Dropbox with 16Mb chunk size&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_wan_upload_dropbox_16mb_chunks.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Upload to Dropbox with 16Mb chunk size&lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;


&lt;/div&gt;


&lt;p&gt;I tested the chunk size by changing the DPBX_UPLOAD_CHUNK_SIZE in &lt;code&gt;/usr/lib/python2.7/site-packages/duplicity/backends/dpbxbackend.py&lt;/code&gt;
:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This is chunk size for upload using Dpbx chumked API v2. It doesn&#39;t
# make sense to make it much large since Dpbx SDK uses connection pool
# internally. So multiple chunks will sent using same keep-alive socket
# Plus in case of network problems we most likely will be able to retry
# only failed chunk
DPBX_UPLOAD_CHUNK_SIZE = 16 * 1024 * 1024&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So I decided to try Google Drive as back end, which was just fixed in duplicity version 0.7.07.1. Google drive utilized the bandwidth much better, and the delay between uploads is when duplicity prepares the next volume for upload.&lt;/p&gt;

&lt;p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-4 photo&#34;&gt;
    &lt;a href=&#34;http://rockhopper.dk/uploads/duplicity_wan_upload_google_drive_volsize_512mb.png&#34;
    title=&#34;Upload to Google Drive with 512Mb volsize&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/duplicity_wan_upload_google_drive_volsize_512mb.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Upload to Google Drive with 512Mb volsize&lt;/div&gt;
&lt;/a&gt;

  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So I purchased 1Tb of storage for Google drive for USD 9.99/month, and to my surprise it was without taxes, so I ended up paying USD 12.49/month (~ DKK 85/month), but it is much faster than Dropbox.&lt;/p&gt;

&lt;p&gt;But as duplicity tried to upload the very last file, it encountered an error:&lt;/p&gt;

&lt;pre&gt;Attempt 1 failed. OverflowError: length too large
Attempt 2 failed. OverflowError: length too large
Attempt 3 failed. OverflowError: length too large
Attempt 4 failed. OverflowError: length too large
Giving up after 5 attempts. OverflowError: length too large&lt;/pre&gt;

&lt;p&gt;It looks like it is caused by &lt;a href=&#34;https://github.com/googledrive/PyDrive/issues/27&#34;&gt;this bug&lt;/a&gt; in PyDrive. I could see duplicity using more than 70% memory, and then produce an error.&lt;/p&gt;

&lt;p&gt;Duplicity creates a &amp;quot;sigtar&amp;quot; file of around 3Gb, which is to much for PyDrive to handle.&lt;/p&gt;

&lt;pre&gt;2,9Gb  duplicity-full-signatures.20160425T193345Z.sigtar.gpg
3,1Gb  duplicity-full-signatures.20160425T193345Z.sigtar.part&lt;/pre&gt;

&lt;p&gt;The solution is to split the backup into smaller sets, so instead of backing up the entire home directory up, I have one set for documents, one for pictures and so on.&lt;/p&gt;

&lt;p&gt;So in conclusion I would say that I found almost every thing I looked for, except the cheap part :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTPC/NAS for watching Netflix on Linux part 3: Powermanagement</title>
      <link>http://rockhopper.dk/linux/hardware/htpcnas-for-watching-netflix-on-linux-part-3-the-hardware/</link>
      <pubDate>Sun, 24 Apr 2016 11:44:30 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/hardware/htpcnas-for-watching-netflix-on-linux-part-3-the-hardware/</guid>
      <description>

&lt;p&gt;My HTPC should be available when I need it, but not waste power when I&#39;m not at home or sleeping.&lt;/p&gt;

&lt;p&gt;See previous parts: &lt;a href=&#34;http://rockhopper.dk/linux/hardware/htpcnas-for-watching-netflix-on-linux-part-1-the-hardware/&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;http://rockhopper.dk/linux/software/htpcnas-for-watching-netflix-on-linux-part-2-the-software/&#34;&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My setup consists of 3 scripts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kodi-shutdown-inhibit-check.sh&lt;/code&gt;: Main script that is run from cron, talks to Kodi to allow/inhibit shutdown&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdown-check.sh&lt;/code&gt;: Checks if anything should inhibit shutdown&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set-next-wakeup.sh&lt;/code&gt;: Sets when the computer should start next time&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;kodi-idle-shutdown-timer:5f91763b9d80fb35b2b67752e5825a34&#34;&gt;Kodi idle shutdown timer&lt;/h2&gt;

&lt;p&gt;Kodi is set to shutdown after 5 mins of inactivity (See &amp;quot;Timer til lukning af funktion&amp;quot;):&lt;/p&gt;



&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-4 photo&#34;&gt;
    &lt;a href=&#34;http://rockhopper.dk/uploads/kodi_powersave_settings.png&#34;
    title=&#34;Kodi Powersave settings&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/kodi_powersave_settings.png&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Kodi Powersave settings&lt;/div&gt;
&lt;/a&gt;

  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Every 4 minutes cron runs the &lt;code&gt;kodi-shutdown-inhibit-check.sh&lt;/code&gt; script. Note: it requires that &lt;code&gt;kodi-send&lt;/code&gt; from the kodi-eventclients package is installed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
# based on http://forum.xbmc.org/showthread.php?tid=172801&amp;pid=1500080#pid1500080

LASTSTATEFILE=&#34;/tmp/xbmc-shutdown-inibit-laststate&#34;

XBMCPIDFILE=&#34;/tmp/xbmc-shutdown-inibit-pid&#34;

# Handle restart of xbmc
CURRENTPID=$(pgrep kodi.bin)

KODI_NOT_RUNNING=0
if [[ $? -gt 0 ]]; then
  KODI_NOT_RUNNING=1
fi

if [[ -f $XBMCPIDFILE ]]; then
  PID=`cat $XBMCPIDFILE`
else
  PID=$CURRENTPID
  echo $PID &gt; $XBMCPIDFILE
fi

# if the old pid is not equal to the current, make sure that inhibit is send again
# by forcing it to be 0
if [[ $PID != $CURRENTPID ]]; then
  /usr/bin/logger &#34;$0: XBMC changed PID: $PID != $CURRENTPID&#34;
  if [[ -f $LASTSTATEFILE ]]; then
    rm $LASTSTATEFILE
  fi
  echo $CURRENTPID &gt; $XBMCPIDFILE
fi

/usr/local/bin/set-next-wakeup.sh &amp;&gt;/dev/null

if [[ -f $LASTSTATEFILE ]]; then
  LASTSTATE=`cat $LASTSTATEFILE`
else
  LASTSTATE=0
fi

/usr/local/bin/shutdown-check.sh &amp;&gt;/dev/null
CHECK=$?

# Enable to debug
# /usr/bin/logger &#34;$0: [DEBUG] CHECK: ${CHECK}&#34;
# /usr/bin/logger &#34;$0: [DEBUG] KODI_NOT_RUNNING: ${KODI_NOT_RUNNING}&#34;
# /usr/bin/logger &#34;$0: [DEBUG] PID: ${PID}&#34;
# /usr/bin/logger &#34;$0: [DEBUG] CURRENTPID: ${CURRENTPID}&#34;

# 0: Shutdown allowed
if [[ $CHECK -eq 0 ]]; then
  if [[ $KODI_NOT_RUNNING -gt 0 ]]; then
    /usr/bin/logger &#34;$0: Kodi not running, shutting down&#34;
    /usr/bin/shutdown -h now
  fi
  if [[ $LASTSTATE -ne 0 ]]; then
    kodi-send --action=&#34;XBMC.InhibitIdleShutdown(false)&#34; &gt;/dev/null
    /usr/bin/logger &#34;$0: Allow shutdown&#34;
    echo &#34;0&#34; &gt; $LASTSTATEFILE
#  else
#    /usr/bin/logger &#34;$0: Shutdown allready allowed&#34;
  fi
else
  if [[ $LASTSTATE -eq 0 ]]; then
    kodi-send --action=&#34;XBMC.InhibitIdleShutdown(true)&#34; &gt;/dev/null
    /usr/bin/logger &#34;$0: Inhibit shutdown&#34;
    echo &#34;1&#34; &gt; $LASTSTATEFILE
#  else
#    /usr/bin/logger &#34;$0: Shutdown allready inhibited&#34;
  fi
fi&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above script calls &lt;code&gt;shutdown-check.sh&lt;/code&gt; to see if it is OK to shutdown. The script checks for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Time of day, weekdays the computer should be on between 9 and 10:59, and again from 19 to 23:59. If the computer is running after midnight it will be shutdown between 2 and 6&lt;/li&gt;
&lt;li&gt;A couple of checks to see if anything is running that should be allowed to continue running&lt;/li&gt;
&lt;li&gt;Is there any users logged in other than the user that runs Kodi (in this case the &amp;quot;mythtv&amp;quot; user)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Check time
HOUR=`date &#39;+%-k&#39;`
MIN=`date +%M`
DAY=`date &#39;+%u&#39;`

case ${DAY} in
  1|2|3|4|5) # Work days
  ONHOURS=&#34;9 10 19 20 21 22 23&#34;
  ;;
  6|7) # Weekends
  ONHOURS=&#34;0 1 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23&#34;
  ;;
esac

# Hours where shutdown is forced
KILLHOURS=&#34;2 3 4 5 6&#34;

for KILLHOUR in ${KILLHOURS}; do
  if [[ ${HOUR} == ${KILLHOUR} ]]; then
    /usr/bin/logger &#34;$0: in killhour: ${HOUR} (day:${DAY})&#34;
    exit 0
  fi
done

for ONHOUR in ${ONHOURS}; do
  if [[ ${HOUR} == ${ONHOUR} ]]; then
    #/usr/bin/logger &#34;$0: in onhour: ${HOUR} (day:${DAY})&#34;
    exit 1
  else
    # Considered true if clock 18:16
    if [[ $(( ${HOUR} + 1 )) == ${ONHOUR} &amp;&amp; ${MIN} -gt 15 ]]; then
      /usr/bin/logger &#34;$0: less than 45min to onhour: ${HOUR} ${MIN} ${ONHOUR} (day:${DAY})&#34;
      exit 1
    fi
  fi
done

if [[ `transmission-remote -l | wc -l` &gt; 2 ]]; then
  /usr/bin/logger &#34;$0: transmission downloading&#34;
  exit 1
fi

if [[ `grep -c &#34;check&#34; /proc/mdstat` = 1 ]]; then
  /usr/bin/logger &#34;$0: raid resync is running&#34;
  exit 1
fi

if [ -e /tmp/noshutdown-*.lock ]; then
  /usr/bin/logger &#34;$0: a job is running&#34;
  exit 1
fi

declare -a CHECK_PROGRAMS
CHECK_PROGRAMS=(&#39;chrome&#39; &#39;chromium&#39; &#39;fs-uae&#39; &#39;popcorntime&#39; &#39;dolphin&#39;)

for PROGRAM in &#34;${CHECK_PROGRAMS[@]}&#34;; do
  if pgrep &#34;$PROGRAM&#34; &amp;&gt;/dev/null; then
    /usr/bin/logger &#34;$0: $PROGRAM is running&#34;
    exit 1
  fi
done

# if last | head | grep -q &#34;.*still logged in&#34;; then
USERS=`w -h | grep -v mythtv | wc -l`
if [[ $USERS &gt; 0 ]]; then
  # A user is logged in
  /usr/bin/logger &#34;$0: user logged in&#34;
  exit 1
fi

/usr/bin/logger &#34;$0: shutdown ok&#34;
exit 0&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wakeup:5f91763b9d80fb35b2b67752e5825a34&#34;&gt;Wakeup&lt;/h2&gt;

&lt;p&gt;The last 2 pieces is to set up the computer so that it will automatically start the next day, and enable Wake-On-LAN.&lt;/p&gt;

&lt;h3 id=&#34;wakeup-via-acpi-rtc:5f91763b9d80fb35b2b67752e5825a34&#34;&gt;Wakeup via ACPI / RTC&lt;/h3&gt;

&lt;p&gt;I have made a simple script that ensures that the computer is turned on at 9:00 and again at 19:00 on weekdays, and at 7:00 in the weekend. The script is called &lt;code&gt;set-next-shutdown.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: this requires that the BIOS/UEFI is configured correctly, in the case of the Gigabyte GA-Z87-D3HP the &amp;quot;Wake from Alarm&amp;quot; should be disabled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Defaults to tomorrow @ 09:00:00 in weekdays, and 07:00:00 in the weekend
LASTWAKETIMEFILE=&#34;/tmp/set_next_wakeup_laststate&#34;

HOUR=`date &#39;+%-k&#39;`
DAY=`date &#39;+%u&#39;`

ONTIME=`date &#39;+%s&#39; -d &#39;tomorrow 09:00:00&#39;`

case ${DAY} in
  1|2|3|4) # Work days
    case ${HOUR} in
      0|1|2|3|4|5|6|7)
        ONTIME=`date &#39;+%s&#39; -d &#39;09:00:00&#39;`
        ;;
      8|9|10|11|12|13|14|15)
        ONTIME=`date &#39;+%s&#39; -d &#39;19:00:00&#39;`
        ;;
    esac
    ;;
  5) # Friday
    case ${HOUR} in
      0|1|2|3|4|5|6|7)
        ONTIME=`date &#39;+%s&#39; -d &#39;9:00:00&#39;`
        ;;
      8|9|10|11|12|13|14|15)
        ONTIME=`date &#39;+%s&#39; -d &#39;19:00:00&#39;`
        ;;
      16|17|18|19|20|21|22|23)
        ONTIME=`date &#39;+%s&#39; -d &#39;tomorrow 07:00:00&#39;`
        ;;
    esac
    ;;
  6) # Saturday
    case ${HOUR} in
      0|1|2|3|4|5|6)
        ONTIME=`date &#39;+%s&#39; -d &#39;7:00:00&#39;`
        ;;
      *)
        ONTIME=`date &#39;+%s&#39; -d &#39;tomorrow 07:00:00&#39;`
        ;;
    esac
    ;;
  7) # Sunday
    case ${HOUR} in
      0|1|2|3|4|5|6)
        ONTIME=`date &#39;+%s&#39; -d &#39;7:00:00&#39;`
        ;;
    esac
    ;;
esac

if [[ -f $LASTWAKETIMEFILE ]]; then
  LASTWAKETIME=`cat $LASTWAKETIMEFILE`
  if [[ $LASTWAKETIME != $ONTIME ]]; then
    /usr/bin/logger &#34;$0: Setting wakeup to $ONTIME (`date -d @${ONTIME}`)&#34;
    echo 0 &gt; /sys/class/rtc/rtc0/wakealarm
    echo $ONTIME &gt; /sys/class/rtc/rtc0/wakealarm
    echo $ONTIME &gt; $LASTWAKETIMEFILE
#  else
#    /usr/bin/logger &#34;$0: Wakeup allready set to $LASTWAKETIME (`date -d @${LASTWAKETIME}`)&#34;
  fi
else
  /usr/bin/logger &#34;$0: Setting wakeup to $ONTIME (`date -d @${ONTIME}`)&#34;
  echo 0 &gt; /sys/class/rtc/rtc0/wakealarm
  echo $ONTIME &gt; /sys/class/rtc/rtc0/wakealarm
  echo $ONTIME &gt; $LASTWAKETIMEFILE
fi&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wake-on-lan-wol:5f91763b9d80fb35b2b67752e5825a34&#34;&gt;Wake On LAN (WOL)&lt;/h3&gt;

&lt;p&gt;In case I need the computer at a time where it is not runnin, I can wake it from my desktop computer or from my phone using the &lt;a href=&#34;https://play.google.com/store/apps/details?id=de.ralischer.wakeonlan&#34;&gt;Wake On LAN&lt;/a&gt; app.&lt;/p&gt;

&lt;p&gt;Activate WOL support using ethtool with a systemd unit (based on &lt;a href=&#34;https://wiki.archlinux.org/index.php/Wake-on-LAN#systemd_service&#34;&gt;Arch Linux Wiki:Wake-on-LAN&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]
Description=Wake-on-LAN for %i
After=network.target

[Service]
ExecStart=/usr/bin/ethtool -s %i wol g
Type=oneshot

[Install]
WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can use the wol tool to wake the HTPC: &lt;code&gt;wol -v ${MAC}&lt;/code&gt; where ${MAC} is the MAC address of NIC&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Local PHP development with Vim/Neovim and Docker</title>
      <link>http://rockhopper.dk/linux/software/local-php-development-with-vimneovim-and-docker</link>
      <pubDate>Tue, 12 Apr 2016 10:47:36 +0200</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/local-php-development-with-vimneovim-and-docker</guid>
      <description>

&lt;p&gt;I use Neovim for all my text editing, and as I&#39;m a web developer I edit a lot of HTML, PHP, CSS and JavaScript. And not only do I have to switch between different programming/markup languages I also have to switch between different environments, ranging from old Drupal 6 sites on Debian squeeze to a Symfony setup on Debian Jessie to ensure that my code works in production.&lt;/p&gt;

&lt;h2 id=&#34;enter-docker:0c08f28664efdd056b375f3539e6eeb3&#34;&gt;Enter Docker&lt;/h2&gt;

&lt;p&gt;Switching between different versions of Apache/PHP/MySQL and other components is nearly impossible if they are locally installed. In the old dark days I would work on a site directly on the server, then later Vagrant came along and gave a virtual server that could be provisioned like the production server and now Docker gives lightweight containers that allows to quickly switch between different setups.&lt;/p&gt;

&lt;p&gt;I use a Docker image that contains all the needed components for the development environment. My docker setup is here &lt;a href=&#34;http://github.com/henrik-farre/docker&#34;&gt;http://github.com/henrik-farre/docker&lt;/a&gt;. I use a simple script to make interaction easier, it&#39;s called &amp;quot;pilotboat&amp;quot;.&lt;/p&gt;

&lt;p&gt;My Docker image contains Apache, MariaDB, PHP5 with Xdebug, Mailhog and Webgrind. Database data is kept separately in a volume and sites/virtual hosts are kept on the host.&lt;/p&gt;

&lt;h3 id=&#34;workflow:0c08f28664efdd056b375f3539e6eeb3&#34;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;I can either drop an existing virtual host file in the vhosts directory, or run &lt;code&gt;pilotboat site-create mydomain.dev&lt;/code&gt; which will create a virtual host and directory structure. I use dnsmasq to point the top level domain (.dev) to localhost. If you use NetworkManager just create the following file: &lt;code&gt;/etc/NetworkManager/dnsmasq.d/dev.conf&lt;/code&gt; containing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;address=/dev/127.0.0.1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I can checkout the site from git and import a database, which can be done by &lt;code&gt;pilotboat db-import database_name&lt;/code&gt;. The command will try to import a file in the databases directory called database_name.sql.gz and the file should have been created by running &lt;code&gt;mysqldump -f --opt -u root -p -c [database_name] | gzip &amp;gt; [database_name.sql.gz]&lt;/code&gt;, or alternative I use phpMyAdmin which is running in the container on &lt;a href=&#34;http://localhost/phpmyadmin/&#34;&gt;http://localhost/phpmyadmin/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vim-neovim:0c08f28664efdd056b375f3539e6eeb3&#34;&gt;Vim / Neovim&lt;/h2&gt;

&lt;p&gt;The only special setup for Vim is connecting Xdebug in the container to Vdebug, and map paths from inside the container to the local file system:
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:vdebug_options = {&amp;quot;path_maps&amp;quot;: {&amp;quot;/var/www&amp;quot;: &amp;quot;/path/to/pilotboat/sites&amp;quot;}, &amp;quot;break_on_open&amp;quot;: 0, &amp;quot;watch_window_style&amp;quot;: &amp;quot;compact&amp;quot;, &amp;quot;server&amp;quot; : &amp;quot;172.17.0.1&amp;quot;, &amp;quot;port&amp;quot;: 9000}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;I try to make Neovim do as much work for me as possible, and I use the following plugins to help me with that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/joonty/vdebug&#34;&gt;Vdebug&lt;/a&gt;: Debug PHP code step by step&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattn/emmet-vim&#34;&gt;Emmet&lt;/a&gt;: Expands div#header &amp;gt; ul.menu &amp;gt; li*5 to real HTML&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SirVer/ultisnips&#34;&gt;UltiSnips&lt;/a&gt;: Advanced snippet expanding, useful for quickly typing PHP functions complete with PHP doc comments&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Valloric/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;: Great for completing the current programming languages native functions and vars&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Raimondi/delimitMate&#34;&gt;delimitMate&lt;/a&gt;: Automatically insert matching brackets, parentheses and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;Surround&lt;/a&gt;: Wraps words in &#39; or * or other characters&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scrooloose/nerdcommenter&#34;&gt;NERD Commenter&lt;/a&gt;: Comment/Uncomment single lines or blocks&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/benekastah/neomake&#34;&gt;Neomake&lt;/a&gt;: Automatically asynchronous syntax checking, works with PHP lint, &lt;a href=&#34;https://phpmd.org/&#34;&gt;PHP Mess Detector&lt;/a&gt; and &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP_CodeSniffer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find my Neovim setup here: &lt;a href=&#34;http://github.com/henrik-farre/vimrc&#34;&gt;http://github.com/henrik-farre/vimrc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTPC/NAS for watching Netflix on Linux part 2: the software</title>
      <link>http://rockhopper.dk/linux/software/htpcnas-for-watching-netflix-on-linux-part-2-the-software/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/htpcnas-for-watching-netflix-on-linux-part-2-the-software/</guid>
      <description>

&lt;p&gt;The system runs Arch Linux with Kodi and Chrome to view Netflix. The post will not go into detail on how to configure Kodi, but rather getting the other pieces of the puzzle setup. Read part 1 here: &lt;a href=&#34;http://rockhopper.dk/linux/hardware/htpcnas-for-watching-netflix-on-linux-part-1-the-hardware/&#34;&gt;HTPC/NAS for watching Netflix on Linux part 1: the hardware&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Originally the setup used &lt;a href=&#34;https://wiki.archlinux.org/index.php/Pipelight&#34;&gt;Pipelight&lt;/a&gt; to watch Netflix, but I have moved away from that, because Chrome for Linux has native support for Netflix playback since version 42.&lt;/p&gt;

&lt;h2 id=&#34;xorg-setup:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Xorg setup&lt;/h2&gt;

&lt;p&gt;The system uses integrated Intel HD 4400 Graphics, and works without any configuration, but to tweak driver settings I created the file &lt;code&gt;/etc/X11/xorg.conf.d/40-device.conf&lt;/code&gt; and added:&lt;/p&gt;

&lt;pre&gt;
Section &#34;Device&#34;
  Identifier  &#34;Card0&#34;
  Driver      &#34;intel&#34;
  Option      &#34;TearFree&#34; &#34;on&#34;
  Option      &#34;TripleBuffer&#34; &#34;on&#34;
  Option      &#34;Tiling&#34; &#34;on&#34;
  Option      &#34;monitor-HDMI1&#34; &#34;HDMI1&#34;
EndSection
&lt;/pre&gt;

&lt;p&gt;Refer to the Arch Linux &lt;a href=&#34;https://wiki.archlinux.org/index.php/Xorg&#34;&gt;wiki entry on Xorg&lt;/a&gt; for more information&lt;/p&gt;

&lt;h2 id=&#34;auto-login:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Auto login&lt;/h2&gt;

&lt;p&gt;As Arch Linux uses systemd I just followed the instructions for &lt;a href=&#34;https://wiki.archlinux.org/index.php/Automatic_login_to_virtual_console&#34;&gt;setting up auto login to console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create the directory &lt;code&gt;/etc/systemd/system/getty@tty1.service.d&lt;/code&gt; and add the following content to the file: &lt;code&gt;/etc/systemd/system/getty@tty1.service.d/autologin.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin YOUR_USERNAME --noclear %I 38400 linux
&lt;/pre&gt;

&lt;p&gt;Remember to change YOUR_USERNAME&lt;/p&gt;

&lt;h2 id=&#34;auto-start-xorg:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Auto start Xorg&lt;/h2&gt;

&lt;p&gt;I have this in &lt;code&gt;~/.bash_profile&lt;/code&gt; which gets sourced when auto login runs.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;source /etc/profile

umask 007
setterm -blank 0

export PATH=$HOME/bin:$PATH:/usr/local/bin

if [[ x$DISPLAY == &#39;x&#39; ]]; then
  # Do not redirect output if you want to run xorg as rootless
  exec startx
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;openbox:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Openbox&lt;/h2&gt;

&lt;p&gt;The startx command executes &lt;code&gt;~/.xinitrc&lt;/code&gt; which contains:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
exec openbox-session
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then Openbox executes: &lt;code&gt;~/.config/openbox/autostart&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

xrdb -load ~/.Xresources

# If colors looks &#34;off&#34;, try to enable the following, my problem has disappeared in newer versions of the Intel driver
# xrandr --output HDMI2 --set &#34;Broadcast RGB&#34; &#34;Full&#34;
# Hide cursor
unclutter &amp;
xset -dpms s off
setxkbmap dk

/usr/bin/kodi --standalone -fs &amp;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kodi-tweaks:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Kodi tweaks&lt;/h2&gt;

&lt;h3 id=&#34;hardware-accelerated-playback-on-intel:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Hardware accelerated playback on Intel&lt;/h3&gt;

&lt;p&gt;I have installed libva-intel-driver, libva-vdpau-driver, libvdpau and libva and enabled hardware accelerated playback in Kodi&#39;s settings. The Intel HD Graphics can handle 1080p without problems.&lt;/p&gt;

&lt;h3 id=&#34;idle-cpu-usage:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Idle CPU usage&lt;/h3&gt;

&lt;p&gt;Depending on the Intel driver version, Kodi might use about 15% CPU when idle, but by editing &lt;code&gt;~/.kodi/userdata/advancedsettings.xml&lt;/code&gt; I was able to reduce it to 3%&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;advancedsettings&amp;gt;
  &amp;lt;gui&amp;gt;
    &amp;lt;algorithmdirtyregions&amp;gt;3&amp;lt;/algorithmdirtyregions&amp;gt;
    &amp;lt;nofliptimeout&amp;gt;1000&amp;lt;/nofliptimeout&amp;gt;
  &amp;lt;/gui&amp;gt;
&amp;lt;/advancedsettings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mouse-pointer:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Mouse pointer&lt;/h3&gt;

&lt;p&gt;To get a decent size cursor in Chrome I have these settings in &lt;code&gt;~/.Xresources&lt;/code&gt; (Requires the DMZ mouse cursor theme installed)&lt;/p&gt;

&lt;pre&gt;
Xcursor.theme: DMZ
Xcursor.size: 32
&lt;/pre&gt;

&lt;h2 id=&#34;plugins:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;I created two simple addons that launches Chromium in fullscreen mode and opens a website like Rdio or Netflix. You can find them in my &lt;a href=&#34;https://github.com/henrik-farre/xbmc-addons&#34;&gt;XBMC addons repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;cec-consumer-electronics-control-over-hdmi:c2e1881c6cc9a7bacff7f9afad74d2a0&#34;&gt;CEC (Consumer Electronics Control) over HDMI&lt;/h2&gt;

&lt;p&gt;I also added a USB - CEC Adapter from &lt;a href=&#34;https://www.pulse-eight.com/&#34;&gt;PulseEight&lt;/a&gt; so it is possible to control Kodi using the TVs remote control.&lt;/p&gt;

&lt;p&gt;If you wish to remap some of the buttons on your remote here is an excellent guide: &lt;a href=&#34;http://xbmcnut.blogspot.dk/2013/07/how-to-remap-cec-buttons-on-sony-tv.html&#34;&gt;How To remap CEC buttons on a Sony TV Remote for XBMC under Xbian 1.0.5a&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple profiles in Firefox: tips and tricks</title>
      <link>http://rockhopper.dk/linux/multiple-profiles-in-firefox-tips-and-tricks/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rockhopper.dk/linux/multiple-profiles-in-firefox-tips-and-tricks/</guid>
      <description>&lt;p&gt;I have two different profiles for Firefox, one for work, and one for everything else.&lt;/p&gt;

&lt;p&gt;To start Firefox with the correct profile, I have created two different application launchers (.desktop files) in ~/.local/share/applications, one called firefox-work.desktop and the other firefox-home.desktop&lt;/p&gt;

&lt;p&gt;The files contain:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-ini&#34;&gt;[Desktop Entry]
Name=Firefox Home
GenericName=Web Browser
Comment=Browse the World Wide Web
Exec=/usr/lib/firefox/firefox -P Home -no-remote %u
Icon=firefox
Terminal=false
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
Categories=Network;WebBrowser;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &amp;#8220;Home&amp;#8221; with the name of your profile.&lt;/p&gt;

&lt;p&gt;In order to open links in the correct profile, I made a small shell script that used xdotool and zenity:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

PROFILE=$(zenity --list --text &#34;Open $1 in which profile?&#34; --column &#34;Profile&#34; Work Home);

case $PROFILE in
  Home)
    PID=$(pgrep -f -- &#39;-P Home&#39;)
    ;;
  Work)
    PID=$(pgrep -f -- &#39;-P Work&#39;)
    ;;
  *)
    exit
    ;;
esac

# Avoid &#34;Can&#39;t consume 1 args; are only 0 available. This is a bug.&#34; message: https://github.com/jordansissel/xdotool/issues/14
# Pick the last id, as it seems to be the one needed
WID=$(xdotool search --any --pid $PID --name &#34;random_random_random&#34; | tail -n1)

xdotool windowactivate --sync $WID
xdotool key --window $WID ctrl+t
xdotool key --window $WID ctrl+l
xdotool type --window $WID &#34;$1&#34;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing to to is to open exo-preferred-applications and select the script as the preferred &amp;#8220;web-browser&amp;#8221; (remember &amp;#8220;%s&amp;#8221;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How not to restore a Linux software raid</title>
      <link>http://rockhopper.dk/linux/software/how-not-to-restore-a-linux-software-raid/</link>
      <pubDate>Sun, 19 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/how-not-to-restore-a-linux-software-raid/</guid>
      <description>&lt;p&gt;We had a disk failure on one of our Xen servers at &lt;a href=&#34;http://www.bellcom.dk&#34;&gt;work&lt;/a&gt; last week, and what we thought would be a quick disk replace, turned into a small nightmare.&lt;/p&gt;

&lt;p&gt;Our setup is fairly &amp;#8220;simple&amp;#8221;: 2 x raid1&amp;#8217;s consisting of sda1/sdb1 (/dev/md0 mounted at /) and sda3/sdb3 (/dev/md1 with LVM on top of it).&lt;/p&gt;

&lt;p&gt;mdadm reported that sdb1 and sdb3 had failed, so we just had to identify which disk was sdb in the server and replace it. Well it wasn&amp;#8217;t easy to see which disk has which after we had opened the server, so we decided to boot the server again to look up the drives&amp;#8217; serial number (using hdparm -I /dev/sda, and the small barcode on the front of the disk).&lt;/p&gt;

&lt;p&gt;Now the fun part starts. The contents of /proc/mdstat showed something like this after the reboot:&lt;/p&gt;

&lt;pre&gt;Personalities : [raid1]
md1 : active raid1 sdb3[0] sda3[1] (F)
      235400320 blocks [2/1] [U_]

md0 : active raid1 sdb1[0] (F) sda1[1]
      7815488 blocks [1/2] [_U]

unused devices: &amp;lt;none&amp;gt;&lt;/pre&gt;

&lt;p&gt;On md0 sdb1 is failed, and on md1 it&amp;#8217;s sda3, so one partition is marked failed on each drive. Here we made the &lt;strong&gt;big mistake&lt;/strong&gt;: we decided to readd sdb1 to md0 and sdb3 to md1.&lt;/p&gt;

&lt;p&gt;While the raid was syncing there was a lot of disk errors on sda1 and sda3, so we identified sda using its serial number, shutdown the server, replaced the disk, booted and everything looked fine.&lt;/p&gt;

&lt;p&gt;Fast forward to the next day: we started receiving e-mails from customers saying data was missing from their sites, and they where missing data from the day the drive failed&amp;#8230; then it dawned on us: when we readded sda3 it was overridden with the old data from sdb3 :(. Only one thing to do: restore from backup.&lt;/p&gt;

&lt;p&gt;Now the question is: why the hell was sda3 marked as failed after the reboot? It was on the good drive&amp;#8230;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CD/DVD burning, and working with .iso files</title>
      <link>http://rockhopper.dk/linux/software/cddvd-burning-and-working-with-iso-files/</link>
      <pubDate>Thu, 13 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/cddvd-burning-and-working-with-iso-files/</guid>
      <description>

&lt;p&gt;Some handy command line tools to burn CDs/DVDs and work with .iso files:&lt;/p&gt;

&lt;h2 id=&#34;burning-iso-files:9bdb5f4f5bfba3f52784bc072e63c9c7&#34;&gt;Burning .iso files:&lt;/h2&gt;

&lt;p&gt;Basic usage of wodim (formally know as cdrecord):&lt;/p&gt;

&lt;pre class=&#34;bash codesnip&#34; style=&#34;font-family:monospace;&#34;&gt;wodim &lt;span class=&#34;re2&#34;&gt;dev&lt;/span&gt;=&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;dev&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;DEVICE image.iso&lt;/pre&gt;

&lt;p&gt;Replace DEVICE with the name of your drive, e.g. hda. You might need to be root/use sudo or have the appropriate permissions to access the device.&lt;/p&gt;

&lt;p&gt;If your drive supports BurnFree add: -v driveropts=burnfree&lt;/p&gt;

&lt;h2 id=&#34;generating-iso-files:9bdb5f4f5bfba3f52784bc072e63c9c7&#34;&gt;Generating .iso files&lt;/h2&gt;

&lt;p&gt;Add content of directory to an iso:&lt;/p&gt;

&lt;pre class=&#34;bash codesnip&#34; style=&#34;font-family:monospace;&#34;&gt;genisoimage &lt;span class=&#34;re5&#34;&gt;-o&lt;/span&gt; image.iso directory&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Some advanced options that might be useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-R : Enable Rock Ridge records (or use -r, read the genisoimage man page for info)&lt;/li&gt;
&lt;li&gt;-joliet-long : Add support for filenames up to 103 chars (breaks joliet specification)&lt;/li&gt;
&lt;li&gt;-graft-points : Maps a directory to another, e.g. specifying &amp;#8220;-graft-points &amp;#8216;/=/home/myusername&#39;&amp;#8221; the contents of /home/myusername is mapped to / on the iso&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;to-burn-directly-to-cd-dvd:9bdb5f4f5bfba3f52784bc072e63c9c7&#34;&gt;To burn directly to CD/DVD&lt;/h2&gt;

&lt;p&gt;By combining genisoimage and wodim, you can burn files directly:&lt;/p&gt;

&lt;pre class=&#34;bash codesnip&#34; style=&#34;font-family:monospace;&#34;&gt;genisoimage directory&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;sy0&#34;&gt;|&lt;/span&gt; wodim &lt;span class=&#34;re2&#34;&gt;dev&lt;/span&gt;=&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;dev&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;hda -&lt;/pre&gt;

&lt;p&gt;Note the missing -o for genisoimage, and the &amp;#8220;-&amp;#8221; argument for wodim&lt;/p&gt;

&lt;h2 id=&#34;mounting-iso-files:9bdb5f4f5bfba3f52784bc072e63c9c7&#34;&gt;Mounting .iso files&lt;/h2&gt;

&lt;p&gt;This requires root rights:&lt;/p&gt;

&lt;pre class=&#34;bash codesnip&#34; style=&#34;font-family:monospace;&#34;&gt;&lt;span class=&#34;kw2&#34;&gt;mount&lt;/span&gt; &lt;span class=&#34;re5&#34;&gt;-o&lt;/span&gt; loop &lt;span class=&#34;re5&#34;&gt;-t&lt;/span&gt; iso9660 image.iso &lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;mnt&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;image&lt;span class=&#34;sy0&#34;&gt;/&lt;/span&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>zsh, bash, screen and urxvt title</title>
      <link>http://rockhopper.dk/linux/software/zsh-bash-screen-and-urxvt-title/</link>
      <pubDate>Wed, 05 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/zsh-bash-screen-and-urxvt-title/</guid>
      <description>&lt;p&gt;I use both the zsh and bash shell, and most of the time I run them in screen. This happens in my favourite terminal: urxvt (aka rxvt-unicode).&lt;/p&gt;

&lt;p&gt;I have a pretty consistence terminal title in both shells. I use hostname[last part of current path]:&lt;/p&gt;



&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-4 photo&#34;&gt;
    &lt;a href=&#34;http://rockhopper.dk/uploads/zsh_screen_urxvt.jpg&#34;
    title=&#34;Zsh in screen in urxvt&#34;
    class=&#34;thumbnail&#34;
    
&gt;
    
        
        &lt;img src=&#34;http://rockhopper.dk/uploads/thumbnails/zsh_screen_urxvt-300x178.jpg&#34;
            class=&#34;&#34;
            
            
            
            
        /&gt;
    
    
    &lt;div class=&#34;caption&#34;&gt;Zsh in screen in urxvt&lt;/div&gt;
&lt;/a&gt;

  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I have the following in my ~/.zsh:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;if [[ ${TERM} == &#34;screen-bce&#34; || ${TERM} == &#34;screen&#34; ]]; then
  precmd () { print -Pn &#34;\033k\033\134\033k%m[%1d]\033\134&#34; }
  preexec () { print -Pn &#34;\033k\033\134\033k%m[$1]\033\134&#34; }
else
  precmd () { print -Pn &#34;\e]0;%n@%m: %~\a&#34; }
  preexec () { print -Pn &#34;\e]0;%n@%m: $1\a&#34; }
fi
PS1=$&#39;%{\e[0;32m%}%m%{\e[0m%}:%~&amp;gt; &#39;
export PS1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My ~/.bashrc:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;PROMPT_COMMAND=&#39;echo -ne &#34;\033]0;${USER}@${HOSTNAME}: ${PWD}\007&#34;&#39;
PS1=&#39;\[\033[0;32m\]\h\[\033[00m\]:\w&amp;gt; &#39;
export PS1 PROMPT_COMMAND
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally my ~/.screenrc&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;hardstatus string &#34;%h&#34;
caption always &#34;%{= kw} %-w%{= wk}%n*%t%{-}%+w%{= kw} %=%d %M %0c %{g}%H%{-}&#34;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Fast nagios exim mail queue plugin replacement</title>
      <link>http://rockhopper.dk/linux/software/fast-nagios-exim-mail-queue-plugin-replacement/</link>
      <pubDate>Sat, 26 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>http://rockhopper.dk/linux/software/fast-nagios-exim-mail-queue-plugin-replacement/</guid>
      <description>&lt;p&gt;We had a problem with the nagios check_mailq plugin at &lt;a href=&#34;http://www.bellcom.dk&#34;&gt;work&lt;/a&gt;, it kept timing out. So I wrote a simple bash script (instead of 610 lines of perl) which is &amp;#8220;compatible&amp;#8221; with check_mailq (supports the same arguments) which uses &amp;#8220;exim4&amp;#8221; and is very quick. Just drop it in /usr/local/bin/check_mailq_simple.sh and adjust your nagios conf to use that instead of check_mailq&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

WARNING=&#34;&#34;
CRITICAL=&#34;&#34;
MAILER=&#34;&#34;
TIMER=&#34;&#34;

while getopts &#34;w:c:M:t&#34; optionName; do
  case &#34;${optionName}&#34; in
    w) WARNING=&#34;${OPTARG}&#34;;;
    c) CRITICAL=&#34;${OPTARG}&#34;;;
    M) MAILER=&#34;${OPTARG}&#34;;;
    t) TIMER=&#34;${OPTARG}&#34;;;
  esac
done

MAILS_IN_QUEUE=`sudo /usr/sbin/exim4 -bpc`

if [[ ${MAILS_IN_QUEUE} -gt ${CRITICAL} ]]; then
  echo &#34;CRITICAL: mailq is ${MAILS_IN_QUEUE} (threshold w = ${CRITICAL})|unsent=${MAILS_IN_QUEUE};${WARNING};${CRITICAL};0&#34;
  exit 2
elif [[ ${MAILS_IN_QUEUE} -gt ${WARNING} ]]; then
  echo &#34;WARNING: mailq is ${MAILS_IN_QUEUE} (threshold w = ${WARNING})|unsent=${MAILS_IN_QUEUE};${WARNING};${CRITICAL};0&#34;
  exit 1
elif [[ ${MAILS_IN_QUEUE} -lt ${WARNING} ]]; then
  echo &#34;OK: mailq is ${MAILS_IN_QUEUE} (threshold w = ${WARNING})|unsent=${MAILS_IN_QUEUE};${WARNING};${CRITICAL};0&#34;
  exit
else
  echo &#34;ERROR: something did not go right&#34;
  exit 2
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has been tested on Debian sarge.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
